#!/bin/bash

## Clean up resources generated by create-cicd-pipeline.yaml for testing purposes. The script, when pushed to main, is
## synced to the main s3 bucket.
##
## Params:
##  -p CICD pipeline project (e.g. web-stack-dev)
##  -s CloudFormation stack name (e.g. web-stack-dev-infra)
##  -a AWS Account ID
##  -r AWS S3 bucket region (e.g. us-west-2)
##  -h help
##
## Cleanup operations overview:
## * Empty s3 bucket for <region>-<accountId>-<project>
## * Delete s3 bucket for <region>-<accountId>-<project>
## * Delete CodePipeline pipeline for <region>-<accountId>-<project>
## * Delete CodeBuild project for <project>-Build
## * Delete IAM policies & roles for CodePipeline
## * Delete IAM policies & roles for CodeBuild

CLEANUP_CICD_PIPELINE_SUBDIR=${BASH_SOURCE%/*}/cleanup-cicd-pipeline.d
AWS_PROJECT_NAME=
AWS_CFN_STACK_NAME=
AWS_S3_BUCKET_NAME=
AWS_ACCOUNT_ID=
AWS_REGION=

function showHelp() {
  echo 'Parameters
---------------------------------------------------------
  -p Project name (e.g. web-stack-dev)
  -s CloudFormation stack name (e.g. web-stack-dev-infra)
  -a AWS Account ID
  -r AWS S3 bucket region (e.g. us-west-2)
  -h Help (show this help)
';

  return 0
}

while getopts ":p:s:a:r:h" OPT; do
    case "${OPT}" in
        p)
            echo "AWS Project Name: ${OPTARG}"
            AWS_PROJECT_NAME="${OPTARG}"
            ;;
        s)
            echo "CloudFormation Stack Name: ${OPTARG}"
            AWS_CFN_STACK_NAME="${OPTARG}"
            ;;
        a)
            echo "AWS Account ID: ${OPTARG}"
            AWS_ACCOUNT_ID=${OPTARG}
            ;;
        r)
            echo "AWS Account Region: ${OPTARG}"
            AWS_REGION=${OPTARG}
            ;;
        h|*)
            showHelp
            ;;
    esac
done

function emptyS3Bucket() {
  echo "$(date) :: Emptying S3 Bucket: ${AWS_REGION}-${AWS_ACCOUNT_ID}-${AWS_PROJECT_NAME}..."
  echo

  OBJECTS_TO_DELETE=$(aws s3api list-object-versions \
    --bucket ${AWS_REGION}-${AWS_ACCOUNT_ID}-${AWS_PROJECT_NAME} \
    --output json \
    --query '{Objects: Versions[].{Key:Key,VersionId:VersionId}}')

  aws s3api delete-objects --bucket "${AWS_REGION}-${AWS_ACCOUNT_ID}-${AWS_PROJECT_NAME}" --delete "${OBJECTS_TO_DELETE}"
  echo

  DELETE_MARKERS_TO_DELETE=$(aws s3api list-object-versions \
    --bucket ${AWS_REGION}-${AWS_ACCOUNT_ID}-${AWS_PROJECT_NAME} \
    --output json \
    --query '{Objects: DeleteMarkers[].{Key:Key,VersionId:VersionId}}')

  aws s3api delete-objects --bucket "${AWS_REGION}-${AWS_ACCOUNT_ID}-${AWS_PROJECT_NAME}" --delete "${DELETE_MARKERS_TO_DELETE}"
  echo

  return $?
}

function deleteS3Bucket() {
  echo "$(date) :: Deleting S3 Bucket: ${AWS_REGION}-${AWS_ACCOUNT_ID}-${AWS_PROJECT_NAME}..."
  echo

  aws s3 rb s3://${AWS_REGION}-${AWS_ACCOUNT_ID}-${AWS_PROJECT_NAME} --force
  echo

  return $?
}

function deletePipeline() {
  echo "$(date) :: Deleting CodePipeline pipeline: ${AWS_REGION}-${AWS_ACCOUNT_ID}-${AWS_PROJECT_NAME}"
  echo

  aws codepipeline delete-pipeline --name ${AWS_REGION}-${AWS_ACCOUNT_ID}-${AWS_PROJECT_NAME}

  return $?
}

function deleteCodeBuildProject() {
  echo "$(date) :: Deleting CodeBuild project: ${AWS_PROJECT_NAME}-Build..."
  echo

  aws codebuild delete-project --name ${AWS_PROJECT_NAME}-Build

  return $?
}

function deletePipelineServiceRole() {
    echo "$(date) :: Deleting IAM role ${AWS_PROJECT_NAME}-PipelineServiceRole..."
    echo

    DELETE_PIPELINE_ROLE_POLICY=$(aws iam delete-role-policy --role-name ${AWS_PROJECT_NAME}-PipelineServiceRole --policy-name project-pipeline-policy-${AWS_PROJECT_NAME})
    DELETE_PIPELINE_ROLE=$(aws iam delete-role --role-name ${AWS_PROJECT_NAME}-PipelineServiceRole)

    $DELETE_PIPELINE_ROLE_POLICY && $DELETE_PIPELINE_ROLE

    return $?
}

function deletePipelineBuildServiceRole() {
    echo "$(date) :: Deleting IAM role ${AWS_PROJECT_NAME}-PipelineBuildServiceRole..."
    echo

    DELETE_PIPELINE_BUILD_ROLE_POLICY=$(aws iam delete-role-policy --role-name ${AWS_PROJECT_NAME}-PipelineBuildServiceRole --policy-name project-pipeline-build-policy-${AWS_PROJECT_NAME})
    DELETE_PIPELINE_BUILD_ROLE=$(aws iam delete-role --role-name ${AWS_PROJECT_NAME}-PipelineBuildServiceRole)

    $DELETE_PIPELINE_BUILD_ROLE_POLICY && $DELETE_PIPELINE_BUILD_ROLE

    return $?
}

function deleteCicdStack() {
  echo "$(date) :: Deleting the main cfn stack ${AWS_CFN_STACK_NAME}..."
  echo

  aws cloudformation delete-stack --stack-name ${AWS_CFN_STACK_NAME}

  echo "$(date) :: This might take a while... hang on!"
  echo

  aws cloudformation wait stack-delete-complete --stack-name ${AWS_CFN_STACK_NAME}

  return $?
}

function cleanupProject() {
  if [[ -z "${AWS_PROJECT_NAME}" ]] || [[ -z "${AWS_CFN_STACK_NAME}" ]]; then
    echo "$(date) :: Missing arguments!"
    echo

    if [[ -z "${AWS_PROJECT_NAME}" ]]; then
      echo "$(date) :: Specify project name (-p <project-name>)"
      echo
    fi

    if [[ -z "${AWS_CFN_STACK_NAME}" ]]; then
      echo "$(date) :: Specify CFN stack name (-s <cfn-stack-name>)"
      echo
    fi

    showHelp

    return 1
  fi

  echo "$(date) :: Attempting to run sub-commands to cleanup downstream projects..."
  echo

  # STEP 1 - clean up downstream resources
  if [[ ! -e ${CLEANUP_CICD_PIPELINE_SUBDIR}/${AWS_PROJECT_NAME}.sh ]]; then
    echo "$(date) :: FATAL - the cleanup file ""${CLEANUP_CICD_PIPELINE_SUBDIR}/${AWS_PROJECT_NAME}.sh"" does not exist! If it isn't needed, then create a placeholder file that is executable..."
    echo
  else
    echo "$(date) :: Running ${CLEANUP_CICD_PIPELINE_SUBDIR}/${AWS_PROJECT_NAME}.sh..."
    echo

    . ${CLEANUP_CICD_PIPELINE_SUBDIR}/${AWS_PROJECT_NAME}.sh
  fi

  # STEP 2 - empty and delete S3 bucket
  emptyS3Bucket && deleteS3Bucket;

  # STEP 3 - delete CodePipeline pipeline & role
  deletePipeline;

  # STEP 4 - delete CodeBuild project & role
  deleteCodeBuildProject;
}

# STEP 5 - run steps 1-4 to delete the resources, then delete the parent CFN stack
cleanupProject && deleteCicdStack && deletePipelineServiceRole && deletePipelineBuildServiceRole;

echo "$(date) :: Done!"
echo