AWSTemplateFormatVersion: "2010-09-09"
Description: Builds web and API server resources (for dev environment)


Resources:
  WebSecurityGroupDev:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    Properties:
      TemplateURL: "https://{{resolve:secretsmanager:web-stack-dev:SecretString:S3RootBucket}}.s3.{{resolve:secretsmanager:web-stack-dev:SecretString:S3RootBucketRegion}}.amazonaws.com/cfn-templates/ec2/create-security-group-web.yaml"
      Parameters:
        GroupName: "web-server-dev-security-group"
        GroupDescription: "AWS EC2 Security Group for web-stack-dev"
        VpcId: '{{resolve:secretsmanager:web-stack-dev:SecretString:VpcId}}'

  ApiSecurityGroupDev:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    Properties:
      TemplateURL: "https://{{resolve:secretsmanager:web-stack-dev:SecretString:S3RootBucket}}.s3.{{resolve:secretsmanager:web-stack-dev:SecretString:S3RootBucketRegion}}.amazonaws.com/cfn-templates/ec2/create-security-group-api.yaml"
      Parameters:
        GroupName: "api-server-dev-security-group"
        GroupDescription: "AWS EC2 Security Group for api-stack-dev"
        NetworkPublicIp: '{{resolve:secretsmanager:web-stack-dev:SecretString:NetworkPublicIp}}'
        SecurityGroupWeb: !GetAtt WebSecurityGroupDev.Outputs.WebSecurityGroupId
        VpcId: '{{resolve:secretsmanager:web-stack-dev:SecretString:VpcId}}'

  DbCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: db-credentials
      GenerateSecretString:
        SecretStringTemplate: '{"username":"webuser"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  WebEc2InstanceDev:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    Properties:
      TemplateURL: "https://{{resolve:secretsmanager:web-stack-dev:SecretString:S3RootBucket}}.s3.{{resolve:secretsmanager:web-stack-dev:SecretString:S3RootBucketRegion}}.amazonaws.com/cfn-templates/ec2/create-ec2-instance.yaml"
      Parameters:
        KeyPairName: "test-ec2-instances"
        InstanceName: "web-server-dev"
        InstanceType: "t2.micro"
        AmiId: "ami-0cf2b4e024cdb6960"
        SecurityGroupId: !GetAtt WebSecurityGroupDev.Outputs.WebSecurityGroupId
        SubnetId: '{{resolve:secretsmanager:web-stack-dev:SecretString:SubnetId}}'
        UserData:
          Fn::Base64: |
            #!/bin/bash
            apt-get update
            apt-get install -y apache2 php libapache2-mod-php
            systemctl enable apache2
            systemctl start apache2
            
    DependsOn: DbCredentials

  ApiEc2InstanceDev:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    Properties:
      TemplateURL: "https://{{resolve:secretsmanager:web-stack-dev:SecretString:S3RootBucket}}.s3.{{resolve:secretsmanager:web-stack-dev:SecretString:S3RootBucketRegion}}.amazonaws.com/cfn-templates/ec2/create-ec2-instance.yaml"
      Parameters:
        KeyPairName: "test-ec2-instances"
        InstanceName: "api-server-dev"
        InstanceType: "t2.micro"
        AmiId: "ami-0cf2b4e024cdb6960"
        SecurityGroupId: !GetAtt ApiSecurityGroupDev.Outputs.ApiSecurityGroupId
        SubnetId: '{{resolve:secretsmanager:web-stack-dev:SecretString:SubnetId}}'
        UserData:
          Fn::Base64: |
            #!/bin/bash
            apt-get update
            apt-get install -y mariadb-server awscli jq
            systemctl enable mariadb
            systemctl start mariadb
            SECRET=$(aws secretsmanager get-secret-value --region {aws_region} --secret-id db-credentials --query SecretString --output text)
            MYSQL_USER=$(echo $SECRET | jq -r .username)
            MYSQL_PASS=$(echo $SECRET | jq -r .password)
            mysql -e "CREATE USER '$MYSQL_USER'@'%' IDENTIFIED BY '$MYSQL_PASS';"
            mysql -e "GRANT ALL PRIVILEGES ON *.* TO '$MYSQL_USER'@'%' WITH GRANT OPTION;"
            mysql -e "FLUSH PRIVILEGES;"